#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re
import subprocess, itertools, errno, csv, gzip
import imp, glob
## import cmo

FACETS_DIR = None 


def make_sure_path_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory) 

def gzip_file_with_size(file_path):
    if not os.path.exists(file_path): return(False)
    with gzip.open(file_path, 'rb') as f:
        for i, l in enumerate(f):
            i = i+1
            if i > 10: return(True)
        return(False)

        
def slugify(value):
    """
    Normalizes string, removes non-alpha characters,
    and converts spaces to hyphens.
    http://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename-in-python
    """
    ##    import unicodedata
    ##    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
    value = re.sub('[^\w\s-]', '', value).strip()
    re.sub('[-\s]+', '-', value)
    return(value)



def run(script, args):
    print script, vars(args)

dev_null = open("/dev/null", "w")
help_regex = re.compile("[ \t]+(-\S) (?:\S+)?, (--\S+) (?:\S+)? +(.*)$")
def add_subparser(file, subparsers):
    print file
    R_script = open(file, "r")
    arguments_found = 0
    finished = 1
    parser = None
    for line in R_script:
        add_argument_index = line.find("add_argument")
        if finished== 0:
            python_code += line.rstrip()
            if line.find(")") > -1:
                finished = 1
                exec python_code
        if add_argument_index > -1:
            arguments_found = 1
            if not parser:
                parser = subparsers.add_parser(name=os.path.basename(file).replace(".R",""))
            python_code = line[add_argument_index:].rstrip()
            python_code =  "parser."+re.sub("""type=['"]\S+['"],""","", python_code)
            if python_code.find(")") == -1:
                #multiline shit
                finished=0
            else:
                exec python_code
    if parser:
        parser.set_defaults(script=file)

     


def create_parser(FACETS_DIR, parser=None):
    if not parser:
        parser = argparse.ArgumentParser(description="run FACETS analysis")
    subparsers = parser.add_subparsers(help='sub-command help')
    for file in glob.glob(os.path.join(FACETS_DIR, "*.R")):
        add_subparser(file, subparsers)
    return parser




if __name__ =='__main__':

    ### ARGUMENTS
    FACETS_DIR = os.path.dirname(os.path.realpath(__file__))
    parser = create_parser(FACETS_DIR)
    (args, facets_args) = parser.parse_known_args()
    args_dict= vars(args)
    args_dict['facets_args']=facets_args
    print args_dict
    run(args.script, args)
##    print args
    

